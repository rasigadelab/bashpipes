manifest {
    description = 'HCL-IAI, Bacteria Phylogeny Pipeline'
}

params {
    nfpath = '/data/bashpipes-main/Phylogeny_pipe/src'
    help = false
}

process {
    withLabel : mash {
        container = "/data/containers/mash.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 40
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : r_analysis {
        container = "/data/containers/r_analysis.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 40
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : map_and_sort {
        container = "/data/containers/map_and_sort.sif"
        memory = '4GB'
        cpus = 48
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : pilon {
        container = "/data/containers/pilon.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : repeatmasker {
        container = "/data/containers/repeatmasker.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : bedops {
        container = "/data/containers/bedops.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : python_tab_creation {
        container = "/data/containers/python_tab_creation.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : snippy {
        container = "/data/containers/snippy.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : iqtree {
        container = "/data/containers/iqtree.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : clonalframeml {
        container = "/data/containers/clonalframeml.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 2
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : gubbins {
        container = "/data/containers/gubbins.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : iqtree_snp_dist {
        container = "/data/containers/iqtree_snp_dist.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : treetime {
        container = "/data/containers/treetime.sif"
        memory = '200GB'
        cpus = 48
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : highCPU {
        maxForks = 16
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

    withLabel : lowCPU {
        memory = '2GB'
        cpus = 1
        maxForks = 40
        errorStrategy = { task.exitStatus == 255 ? 'retry' : 'terminate' }
        maxRetries = 5 
    }

}

profiles {
    standard {
        process.executor = 'local'
        process.cpus = 192
        process.memory = '1000GB'
    }

    developer {
        process.executor = 'local'
        process.cpus = 8
        process.memory = '2GB'
    }

}

singularity {
    enabled = true
    autoMount = false
    runOptions = '--bind /data,/run:/run'
}
